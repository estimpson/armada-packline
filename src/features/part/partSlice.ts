import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { ILocalApiState } from '../localApi/localApiSlice';
import { IPartPackaging } from '../partPackaging/partPackagingSlice';
import { retrieveParts } from './partAPI';

export interface IPart {
    partCode: string;
    partDescription: string;
    unitWeight: number;
    weightTolerance: number;
    requiresFinalInspection: boolean;
    deflashMethod?: 'MACHINE' | 'TEARTRIM';
    packagingList: IPartPackaging[];
}

export interface IPartListState {
    value: IPart[];
    status: 'init' | 'idle' | 'loading' | 'failed';
}

const initialState: IPartListState = {
    value: [],
    status: 'init',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getPartList = createAsyncThunk(
    'part/getList',
    async (dummy: {} = {}, { getState }) => {
        const { localApiDetails } = getState() as {
            localApiDetails: ILocalApiState;
        };
        const response = await retrieveParts(localApiDetails);

        return response.data;
    },
);

export const partSlice = createSlice({
    name: 'part',
    initialState,
    // The `reducers` field lets us define reduceres and generated associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getPartList.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getPartList.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            });
    },
});

// eslint-disable-next-line no-empty-pattern
export const {} = partSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPartList = (state: RootState): IPart[] =>
    state.partList.value;

export default partSlice.reducer;
