import { createAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { IApplicationErrorState } from '../applicationError/applicationErrorSlice';
import { ILocalApiState } from '../localApi/localApiSlice';
import { retrieveRecentPieceWeights } from './recentPieceWeightAPI';

export interface IRecentPieceWeight {
    pieceWeight: number;
    rowID: number;
}

export interface IRecentPieceWeightListState {
    value: IRecentPieceWeight[];
    status: 'init' | 'idle' | 'loading' | 'failed';
}

const initialState: IRecentPieceWeightListState = {
    value: [],
    status: 'init',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const SetError = createAction<IApplicationErrorState>(
    'applicationError/applicationErrorOccurred',
);

export const getRecentPieceWeightListAsync = createAsyncThunk(
    'recentPieceWeight/getList',
    async (partCode: string, { dispatch, getState }) => {
        const { localApiDetails } = getState() as {
            localApiDetails: ILocalApiState;
        };
        const response = await retrieveRecentPieceWeights(
            localApiDetails,
            partCode,
            dispatch,
            SetError,
        );

        return response.data;
    },
);

// A function that accepts an initial state, an object full of reducer functions,
// and a "slice name", and automatically generates action creators and action types
// that correspond to the reducers and state.
export const recentPieceWeightListSlice = createSlice({
    name: 'recentPieceWeight',
    initialState,
    reducers: {
        reset: (state) => {
            state = initialState;
        },
        //todo: error checking
        //todo: notification on async tasks
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getRecentPieceWeightListAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(
                getRecentPieceWeightListAsync.fulfilled,
                (state, action) => {
                    state.status = 'idle';
                    state.value = action.payload;
                },
            );
    },
});

export const { reset } = recentPieceWeightListSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectRecentPieceWeightList = (
    state: RootState,
): IRecentPieceWeight[] => state.recentPieceWeightList.value;

export default recentPieceWeightListSlice.reducer;
