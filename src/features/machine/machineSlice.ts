import { createAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { IApplicationErrorState } from '../applicationError/applicationErrorSlice';
import { ILocalApiState } from '../localApi/localApiSlice';
import { retrieveMachines } from './machineAPI';

export interface IMachine {
    machineCode: string;
    machineDescription: string;
}

export interface IMachineListState {
    value: IMachine[];
    status: 'init' | 'idle' | 'loading' | 'failed';
}

const initialState: IMachineListState = {
    value: [],
    status: 'init',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const SetError = createAction<IApplicationErrorState>(
    'applicationError/applicationErrorOccurred',
);

export const getMachineListAsync = createAsyncThunk(
    'machine/getList',
    async (dummy: void, { dispatch, getState }) => {
        const { localApiDetails } = getState() as {
            localApiDetails: ILocalApiState;
        };
        const response = await retrieveMachines(
            localApiDetails,
            dispatch,
            SetError,
        );

        return response.data;
    },
);

export const machineSlice = createSlice({
    name: 'machine',
    initialState,
    // The `reducers` field lets us define reduceres and generated associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getMachineListAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getMachineListAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            });
    },
});

// eslint-disable-next-line no-empty-pattern
export const {} = machineSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectMachineList = (state: RootState): IMachine[] =>
    state.machineList.value;

export default machineSlice.reducer;
