import { createAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { ILocalApiState } from '../localApi/localApiSlice';
import { retrievePartialBoxes } from './partialBoxListAPI';

export interface IPartialBox {
    serial: number;
    packageType?: string;
    quantity: number;
    notes?: string;
    lastDate: string;
}

export interface IPartialBoxListState {
    value: IPartialBox[];
    status: 'init' | 'idle' | 'loading' | 'failed';
}

const initialState: IPartialBoxListState = {
    value: [],
    status: 'init',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const SetError = createAction(
    'applicationError/applicationErrorOccurred',
);

export const getPartialBoxListAsync = createAsyncThunk(
    'partialBox/getList',
    async (partCode: string, { getState }) => {
        const { localApiDetails } = getState() as {
            localApiDetails: ILocalApiState;
        };
        const response = await retrievePartialBoxes(
            localApiDetails,
            partCode,
            SetError,
        );

        return response.data;
    },
);

// A function that accepts an initial state, an object full of reducer functions,
// and a "slice name", and automatically generates action creators and action types
// that correspond to the reducers and state.
export const prototypeListSlice = createSlice({
    name: 'partialBox',
    initialState,
    reducers: {
        reset: (state) => {
            state = initialState;
        },
        //todo: error checking
        //todo: notification on async tasks
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getPartialBoxListAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getPartialBoxListAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            });
    },
});

export const { reset } = prototypeListSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectPartialBoxList = (state: RootState): IPartialBox[] =>
    state.partialBoxList.value;

export default prototypeListSlice.reducer;
